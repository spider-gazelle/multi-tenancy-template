require "json"

class App::Models::Oauth2Provider < ::PgORM::Base
  table :oauth2_providers

  default_primary_key id : UUID, autogenerated: true

  attribute organization_id : UUID
  belongs_to :organization

  attribute name : String
  attribute client_id : String
  attribute client_secret : String
  attribute site : String
  attribute authorize_url : String
  attribute token_url : String
  attribute token_method : String
  attribute authentication_scheme : String
  attribute user_profile_url : String
  attribute scopes : String
  attribute info_mappings : JSON::Any

  include PgORM::Timestamps

  before_save do
    self.name = name.strip
    self.site = site.strip
    self.authorize_url = authorize_url.strip
    self.token_url = token_url.strip
    self.user_profile_url = user_profile_url.strip
    self.scopes = scopes.strip
    self.token_method = token_method.strip
    self.authentication_scheme = authentication_scheme.strip
  end

  # Get the provider string used in Auth model
  def provider_string : String
    "oauth-#{id}"
  end

  # Get the full authorize URL
  def full_authorize_url : String
    "#{site}#{authorize_url}"
  end

  # Get the full token URL
  def full_token_url : String
    "#{site}#{token_url}"
  end

  # Get the full user profile URL
  def full_user_profile_url : String
    "#{site}#{user_profile_url}"
  end

  # Parse info mappings from JSONB
  def info_mappings_hash : Hash(String, String)
    mappings = {} of String => String
    if raw_mappings = info_mappings.as_h?
      raw_mappings.each do |key, value|
        mappings[key.to_s] = value.as_s
      end
    end
    mappings
  end
end
